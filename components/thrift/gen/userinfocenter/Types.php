<?php
namespace userinfocenter;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class TJinfuziException extends TException {
    static $_TSPEC;

    /**
     * @var int
     */
    public $errCode = null;
    /**
     * @var string
     */
    public $errMsg = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'errCode',
                    'type' => TType::I32,
                ),
                2 => array(
                    'var' => 'errMsg',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['errCode'])) {
                $this->errCode = $vals['errCode'];
            }
            if (isset($vals['errMsg'])) {
                $this->errMsg = $vals['errMsg'];
            }
        }
    }

    public function getName() {
        return 'TJinfuziException';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->errCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->errMsg);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TJinfuziException');
        if ($this->errCode !== null) {
            $xfer += $output->writeFieldBegin('errCode', TType::I32, 1);
            $xfer += $output->writeI32($this->errCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->errMsg !== null) {
            $xfer += $output->writeFieldBegin('errMsg', TType::STRING, 2);
            $xfer += $output->writeString($this->errMsg);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

/**
 * 用户证件信息
 */
class IdentityCardInfo {
    static $_TSPEC;

    /**
     * 证件号码
     *
     * @var string
     */
    public $identityCardNumber = null;
    /**
     * 证件上姓名
     *
     * @var string
     */
    public $identityCardName = null;
    /**
     * 来源平台, 0:未知 1:滚雪球app 2:滚雪球微信 3:金斧子app 4:金斧子小额理财网wap  5:金斧子小额理财网pc 6:斧子宝 7:金斧子官网 8:金斧子众筹
     *
     * @var int
     */
    public $sourcePlatform = null;
    /**
     * 证件类型：0-身份证；1-护照；2-军官证；3-士兵证，4-港澳通行证，5-户口本，6-外国护照，A-台胞证；
     *
     * @var string
     */
    public $certType = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'identityCardNumber',
                    'type' => TType::STRING,
                ),
                2 => array(
                    'var' => 'identityCardName',
                    'type' => TType::STRING,
                ),
                3 => array(
                    'var' => 'sourcePlatform',
                    'type' => TType::I32,
                ),
                4 => array(
                    'var' => 'certType',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['identityCardNumber'])) {
                $this->identityCardNumber = $vals['identityCardNumber'];
            }
            if (isset($vals['identityCardName'])) {
                $this->identityCardName = $vals['identityCardName'];
            }
            if (isset($vals['sourcePlatform'])) {
                $this->sourcePlatform = $vals['sourcePlatform'];
            }
            if (isset($vals['certType'])) {
                $this->certType = $vals['certType'];
            }
        }
    }

    public function getName() {
        return 'IdentityCardInfo';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->identityCardNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->identityCardName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->sourcePlatform);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->certType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('IdentityCardInfo');
        if ($this->identityCardNumber !== null) {
            $xfer += $output->writeFieldBegin('identityCardNumber', TType::STRING, 1);
            $xfer += $output->writeString($this->identityCardNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->identityCardName !== null) {
            $xfer += $output->writeFieldBegin('identityCardName', TType::STRING, 2);
            $xfer += $output->writeString($this->identityCardName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sourcePlatform !== null) {
            $xfer += $output->writeFieldBegin('sourcePlatform', TType::I32, 3);
            $xfer += $output->writeI32($this->sourcePlatform);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->certType !== null) {
            $xfer += $output->writeFieldBegin('certType', TType::STRING, 4);
            $xfer += $output->writeString($this->certType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

/**
 * 用户基本信息
 */
class UserBaseInfo {
    static $_TSPEC;

    /**
     * 用户唯一标识uid
     *
     * @var int
     */
    public $uid = null;
    /**
     * 证件信息
     *
     * @var \userinfocenter\IdentityCardInfo
     */
    public $identityCardInfo = null;
    /**
     * 是否VIP用户，0非VIP，1 VIP
     *
     * @var int
     */
    public $isVIP = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'identityCardInfo',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\IdentityCardInfo',
                ),
                3 => array(
                    'var' => 'isVIP',
                    'type' => TType::I32,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['identityCardInfo'])) {
                $this->identityCardInfo = $vals['identityCardInfo'];
            }
            if (isset($vals['isVIP'])) {
                $this->isVIP = $vals['isVIP'];
            }
        }
    }

    public function getName() {
        return 'UserBaseInfo';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->identityCardInfo = new \userinfocenter\IdentityCardInfo();
                        $xfer += $this->identityCardInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->isVIP);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserBaseInfo');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->identityCardInfo !== null) {
            if (!is_object($this->identityCardInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('identityCardInfo', TType::STRUCT, 2);
            $xfer += $this->identityCardInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isVIP !== null) {
            $xfer += $output->writeFieldBegin('isVIP', TType::I32, 3);
            $xfer += $output->writeI32($this->isVIP);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

/**
 * 用户平台银行卡信息
 */
class UserPlatformBankCardInfo {
    static $_TSPEC;

    /**
     * 平台id，1：数米基金、2：共鸣P2P、3：宏康保险、4：金斧子P2P
     *
     * @var int
     */
    public $platformId = null;
    /**
     * 用户唯一标识uid
     *
     * @var int
     */
    public $uid = null;
    /**
     * 银行卡号
     *
     * @var string
     */
    public $bankCardNumber = null;
    /**
     * 银行编号
     *
     * @var string
     */
    public $bankCode = null;
    /**
     * 银行预留手机号
     *
     * @var string
     */
    public $bankPhoneNum = null;
    /**
     * 开户银行省份
     *
     * @var string
     */
    public $bankProvince = null;
    /**
     * 开户银行市
     *
     * @var string
     */
    public $bankCity = null;
    /**
     * 开户支行名称
     *
     * @var string
     */
    public $bankBranchName = null;
    /**
     * 是否被认证，默认0为未认证，1已认证
     *
     * @var int
     */
    public $isAuthentication = null;
    /**
     * 卡状态，默认0为正常，1已解绑
     *
     * @var int
     */
    public $status = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'platformId',
                    'type' => TType::I32,
                ),
                2 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                3 => array(
                    'var' => 'bankCardNumber',
                    'type' => TType::STRING,
                ),
                4 => array(
                    'var' => 'bankCode',
                    'type' => TType::STRING,
                ),
                5 => array(
                    'var' => 'bankPhoneNum',
                    'type' => TType::STRING,
                ),
                6 => array(
                    'var' => 'bankProvince',
                    'type' => TType::STRING,
                ),
                7 => array(
                    'var' => 'bankCity',
                    'type' => TType::STRING,
                ),
                8 => array(
                    'var' => 'bankBranchName',
                    'type' => TType::STRING,
                ),
                9 => array(
                    'var' => 'isAuthentication',
                    'type' => TType::I32,
                ),
                10 => array(
                    'var' => 'status',
                    'type' => TType::I32,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['platformId'])) {
                $this->platformId = $vals['platformId'];
            }
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['bankCardNumber'])) {
                $this->bankCardNumber = $vals['bankCardNumber'];
            }
            if (isset($vals['bankCode'])) {
                $this->bankCode = $vals['bankCode'];
            }
            if (isset($vals['bankPhoneNum'])) {
                $this->bankPhoneNum = $vals['bankPhoneNum'];
            }
            if (isset($vals['bankProvince'])) {
                $this->bankProvince = $vals['bankProvince'];
            }
            if (isset($vals['bankCity'])) {
                $this->bankCity = $vals['bankCity'];
            }
            if (isset($vals['bankBranchName'])) {
                $this->bankBranchName = $vals['bankBranchName'];
            }
            if (isset($vals['isAuthentication'])) {
                $this->isAuthentication = $vals['isAuthentication'];
            }
            if (isset($vals['status'])) {
                $this->status = $vals['status'];
            }
        }
    }

    public function getName() {
        return 'UserPlatformBankCardInfo';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platformId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankCardNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankPhoneNum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankProvince);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankCity);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankBranchName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->isAuthentication);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserPlatformBankCardInfo');
        if ($this->platformId !== null) {
            $xfer += $output->writeFieldBegin('platformId', TType::I32, 1);
            $xfer += $output->writeI32($this->platformId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 2);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankCardNumber !== null) {
            $xfer += $output->writeFieldBegin('bankCardNumber', TType::STRING, 3);
            $xfer += $output->writeString($this->bankCardNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankCode !== null) {
            $xfer += $output->writeFieldBegin('bankCode', TType::STRING, 4);
            $xfer += $output->writeString($this->bankCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankPhoneNum !== null) {
            $xfer += $output->writeFieldBegin('bankPhoneNum', TType::STRING, 5);
            $xfer += $output->writeString($this->bankPhoneNum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankProvince !== null) {
            $xfer += $output->writeFieldBegin('bankProvince', TType::STRING, 6);
            $xfer += $output->writeString($this->bankProvince);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankCity !== null) {
            $xfer += $output->writeFieldBegin('bankCity', TType::STRING, 7);
            $xfer += $output->writeString($this->bankCity);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankBranchName !== null) {
            $xfer += $output->writeFieldBegin('bankBranchName', TType::STRING, 8);
            $xfer += $output->writeString($this->bankBranchName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isAuthentication !== null) {
            $xfer += $output->writeFieldBegin('isAuthentication', TType::I32, 9);
            $xfer += $output->writeI32($this->isAuthentication);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->status !== null) {
            $xfer += $output->writeFieldBegin('status', TType::I32, 10);
            $xfer += $output->writeI32($this->status);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

/**
 * 用户平台支付宝信息
 */
class UserPlatformAliPayInfo {
    static $_TSPEC;

    /**
     * 平台id，平台id，1：滚雪球app，2：金斧子
     *
     * @var int
     */
    public $platformId = null;
    /**
     * 用户唯一标识uid
     *
     * @var int
     */
    public $uid = null;
    /**
     * 支付宝账号
     *
     * @var string
     */
    public $alipayAccount = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'platformId',
                    'type' => TType::I32,
                ),
                2 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                3 => array(
                    'var' => 'alipayAccount',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['platformId'])) {
                $this->platformId = $vals['platformId'];
            }
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['alipayAccount'])) {
                $this->alipayAccount = $vals['alipayAccount'];
            }
        }
    }

    public function getName() {
        return 'UserPlatformAliPayInfo';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platformId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->alipayAccount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserPlatformAliPayInfo');
        if ($this->platformId !== null) {
            $xfer += $output->writeFieldBegin('platformId', TType::I32, 1);
            $xfer += $output->writeI32($this->platformId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 2);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->alipayAccount !== null) {
            $xfer += $output->writeFieldBegin('alipayAccount', TType::STRING, 3);
            $xfer += $output->writeString($this->alipayAccount);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class UserInfo {
    static $_TSPEC;

    /**
     * 用户基本信息
     *
     * @var \userinfocenter\UserBaseInfo
     */
    public $userBaseInfo = null;
    /**
     * 用户平台银行卡信息
     *
     * @var \userinfocenter\UserPlatformBankCardInfo[]
     */
    public $userPlatformBankCardList = null;
    /**
     * 用户平台支付宝信息
     *
     * @var \userinfocenter\UserPlatformAliPayInfo[]
     */
    public $userPlatformAliPayList = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'userBaseInfo',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserBaseInfo',
                ),
                2 => array(
                    'var' => 'userPlatformBankCardList',
                    'type' => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem' => array(
                        'type' => TType::STRUCT,
                        'class' => '\userinfocenter\UserPlatformBankCardInfo',
                    ),
                ),
                3 => array(
                    'var' => 'userPlatformAliPayList',
                    'type' => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem' => array(
                        'type' => TType::STRUCT,
                        'class' => '\userinfocenter\UserPlatformAliPayInfo',
                    ),
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['userBaseInfo'])) {
                $this->userBaseInfo = $vals['userBaseInfo'];
            }
            if (isset($vals['userPlatformBankCardList'])) {
                $this->userPlatformBankCardList = $vals['userPlatformBankCardList'];
            }
            if (isset($vals['userPlatformAliPayList'])) {
                $this->userPlatformAliPayList = $vals['userPlatformAliPayList'];
            }
        }
    }

    public function getName() {
        return 'UserInfo';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->userBaseInfo = new \userinfocenter\UserBaseInfo();
                        $xfer += $this->userBaseInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->userPlatformBankCardList = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
                        {
                            $elem5 = null;
                            $elem5 = new \userinfocenter\UserPlatformBankCardInfo();
                            $xfer += $elem5->read($input);
                            $this->userPlatformBankCardList []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->userPlatformAliPayList = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
                        {
                            $elem11 = null;
                            $elem11 = new \userinfocenter\UserPlatformAliPayInfo();
                            $xfer += $elem11->read($input);
                            $this->userPlatformAliPayList []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserInfo');
        if ($this->userBaseInfo !== null) {
            if (!is_object($this->userBaseInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userBaseInfo', TType::STRUCT, 1);
            $xfer += $this->userBaseInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userPlatformBankCardList !== null) {
            if (!is_array($this->userPlatformBankCardList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userPlatformBankCardList', TType::LST, 2);
            {
                $output->writeListBegin(TType::STRUCT, count($this->userPlatformBankCardList));
                {
                    foreach ($this->userPlatformBankCardList as $iter12)
                    {
                        $xfer += $iter12->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userPlatformAliPayList !== null) {
            if (!is_array($this->userPlatformAliPayList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userPlatformAliPayList', TType::LST, 3);
            {
                $output->writeListBegin(TType::STRUCT, count($this->userPlatformAliPayList));
                {
                    foreach ($this->userPlatformAliPayList as $iter13)
                    {
                        $xfer += $iter13->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class AccountModifyQuery {
    static $_TSPEC;

    /**
     * 修改时间, 接口返回修改时间大于此时间的记录
     *
     * @var string
     */
    public $modifyTime = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'modifyTime',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['modifyTime'])) {
                $this->modifyTime = $vals['modifyTime'];
            }
        }
    }

    public function getName() {
        return 'AccountModifyQuery';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->modifyTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('AccountModifyQuery');
        if ($this->modifyTime !== null) {
            $xfer += $output->writeFieldBegin('modifyTime', TType::STRING, 1);
            $xfer += $output->writeString($this->modifyTime);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

/**
 * 账户信息更改记录
 */
class UserAccountModifyInfo {
    static $_TSPEC;

    /**
     * 账户信息更改记录id
     *
     * @var int
     */
    public $id = null;
    /**
     * 用户id
     *
     * @var int
     */
    public $uid = null;
    /**
     * 修改时间
     *
     * @var string
     */
    public $modifyTime = null;
    /**
     * 新的账户信息
     *
     * @var string
     */
    public $newAccount = null;
    /**
     * 旧的账户信息
     *
     * @var string
     */
    public $originalAccount = null;
    /**
     * 类型：1 更改手机号
     *
     * @var int
     */
    public $type = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'id',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                3 => array(
                    'var' => 'modifyTime',
                    'type' => TType::STRING,
                ),
                4 => array(
                    'var' => 'newAccount',
                    'type' => TType::STRING,
                ),
                5 => array(
                    'var' => 'originalAccount',
                    'type' => TType::STRING,
                ),
                6 => array(
                    'var' => 'type',
                    'type' => TType::I32,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['modifyTime'])) {
                $this->modifyTime = $vals['modifyTime'];
            }
            if (isset($vals['newAccount'])) {
                $this->newAccount = $vals['newAccount'];
            }
            if (isset($vals['originalAccount'])) {
                $this->originalAccount = $vals['originalAccount'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
        }
    }

    public function getName() {
        return 'UserAccountModifyInfo';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->modifyTime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->newAccount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->originalAccount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserAccountModifyInfo');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 1);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 2);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->modifyTime !== null) {
            $xfer += $output->writeFieldBegin('modifyTime', TType::STRING, 3);
            $xfer += $output->writeString($this->modifyTime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->newAccount !== null) {
            $xfer += $output->writeFieldBegin('newAccount', TType::STRING, 4);
            $xfer += $output->writeString($this->newAccount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->originalAccount !== null) {
            $xfer += $output->writeFieldBegin('originalAccount', TType::STRING, 5);
            $xfer += $output->writeString($this->originalAccount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 6);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

/**
 * 用户私募风险评测
 */
class UserPFRiskEvaluationInfo {
    static $_TSPEC;

    /**
     * 私募风险评测记录id, 修改时必须提供
     *
     * @var int
     */
    public $id = null;
    /**
     * 用户id, 新增时必须提供, 已存在的记录不可修改此字段
     *
     * @var int
     */
    public $uid = null;
    /**
     * 创建时间, 新增修改无需提供
     *
     * @var int
     */
    public $ctime = null;
    /**
     * 修改时间, 新增修改均无需提供
     *
     * @var int
     */
    public $mtime = null;
    /**
     * 来源平台id，1：PC 2：APP 3: ERP, 新增时必须提供，无法修改
     *
     * @var int
     */
    public $platform_id = null;
    /**
     * 评测归属, 新增和修改都必须提供
     *
     * @var string
     */
    public $risk_type = null;
    /**
     * 评测答案, 新增和修改都必须提供
     *
     * @var string
     */
    public $answer = null;
    /**
     * 评测分数
     *
     * @var string
     */
    public $point = null;
    /**
     * 评测题目id
     *
     * @var int
     */
    public $topic_id = null;
    /**
     * 手机号码
     *
     * @var string
     */
    public $phone = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'id',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                3 => array(
                    'var' => 'ctime',
                    'type' => TType::I64,
                ),
                4 => array(
                    'var' => 'mtime',
                    'type' => TType::I64,
                ),
                5 => array(
                    'var' => 'platform_id',
                    'type' => TType::I32,
                ),
                6 => array(
                    'var' => 'risk_type',
                    'type' => TType::STRING,
                ),
                7 => array(
                    'var' => 'answer',
                    'type' => TType::STRING,
                ),
                8 => array(
                    'var' => 'point',
                    'type' => TType::STRING,
                ),
                9 => array(
                    'var' => 'topic_id',
                    'type' => TType::I32,
                ),
                10 => array(
                    'var' => 'phone',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['ctime'])) {
                $this->ctime = $vals['ctime'];
            }
            if (isset($vals['mtime'])) {
                $this->mtime = $vals['mtime'];
            }
            if (isset($vals['platform_id'])) {
                $this->platform_id = $vals['platform_id'];
            }
            if (isset($vals['risk_type'])) {
                $this->risk_type = $vals['risk_type'];
            }
            if (isset($vals['answer'])) {
                $this->answer = $vals['answer'];
            }
            if (isset($vals['point'])) {
                $this->point = $vals['point'];
            }
            if (isset($vals['topic_id'])) {
                $this->topic_id = $vals['topic_id'];
            }
            if (isset($vals['phone'])) {
                $this->phone = $vals['phone'];
            }
        }
    }

    public function getName() {
        return 'UserPFRiskEvaluationInfo';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->ctime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->mtime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platform_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->risk_type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->answer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->point);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->topic_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->phone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('UserPFRiskEvaluationInfo');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 1);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 2);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ctime !== null) {
            $xfer += $output->writeFieldBegin('ctime', TType::I64, 3);
            $xfer += $output->writeI64($this->ctime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mtime !== null) {
            $xfer += $output->writeFieldBegin('mtime', TType::I64, 4);
            $xfer += $output->writeI64($this->mtime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platform_id !== null) {
            $xfer += $output->writeFieldBegin('platform_id', TType::I32, 5);
            $xfer += $output->writeI32($this->platform_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->risk_type !== null) {
            $xfer += $output->writeFieldBegin('risk_type', TType::STRING, 6);
            $xfer += $output->writeString($this->risk_type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->answer !== null) {
            $xfer += $output->writeFieldBegin('answer', TType::STRING, 7);
            $xfer += $output->writeString($this->answer);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->point !== null) {
            $xfer += $output->writeFieldBegin('point', TType::STRING, 8);
            $xfer += $output->writeString($this->point);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->topic_id !== null) {
            $xfer += $output->writeFieldBegin('topic_id', TType::I32, 9);
            $xfer += $output->writeI32($this->topic_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->phone !== null) {
            $xfer += $output->writeFieldBegin('phone', TType::STRING, 10);
            $xfer += $output->writeString($this->phone);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}


