<?php
namespace userinfocenter;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 统一将方法中可能出现的异常转为TJinfuziException，请调用端捕获处理
 */
interface ThriftUserInfoServiceIf {
    /**
     * 获取用户的所有信息
     *
     * @param int $uid
     * @return \userinfocenter\UserInfo
     * @throws \userinfocenter\TJinfuziException
     */
    public function getFullUserInfo($uid);
    /**
     * 获取用户的基本信息(erp)
     *
     * @param int $uid
     * @return \userinfocenter\UserBaseInfo 用户基本信息
     *
     * @throws \userinfocenter\TJinfuziException
     */
    public function getBasicUserInfo($uid);
    /**
     * 获取批量的用户基本信息
     *
     * @param int[] $uids
     * @return \userinfocenter\UserBaseInfo[]
     * @throws \userinfocenter\TJinfuziException
     */
    public function getBasicUserInfoList(array $uids);
    /**
     * 根据指定平台获取用户信息,platformId 1：数米基金、2：共鸣P2P、3：宏康保险、4：金斧子P2P
     *
     * @param int $uid
     * @param int $platformId
     * @return \userinfocenter\UserInfo
     * @throws \userinfocenter\TJinfuziException
     */
    public function getPlatformUserBankCardInfo($uid, $platformId);
    /**
     * 根据指定业务获取用户的跨平台信息，platformBusiness 1、基金，2、P2P，3、保险
     *
     * @param int $uid
     * @param int $platformBusiness
     * @return \userinfocenter\UserInfo
     * @throws \userinfocenter\TJinfuziException
     */
    public function getUserInfoByBusiness($uid, $platformBusiness);
    /**
     * 添加用户身份证信息，返回true成功(erp)
     *
     * @param int $uid
     * @param \userinfocenter\IdentityCardInfo $identityCardInfo
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function addIdentityCardInfo($uid, \userinfocenter\IdentityCardInfo $identityCardInfo);
    /**
     * 添加用户所有信息，返回true成功
     *
     * @param \userinfocenter\UserInfo $userInfo
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function addUserInfo(\userinfocenter\UserInfo $userInfo);
    /**
     * 添加用户指定平台的银行卡信息，返回true成功
     *
     * @param \userinfocenter\UserPlatformBankCardInfo $userInfo
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function addPlatformUserBankCardInfo(\userinfocenter\UserPlatformBankCardInfo $userInfo);
    /**
     * 删除用户指定平台的银行卡信息，返回true成功
     *
     * @param int $uid
     * @param int $platformId
     * @param string $bankCardNumber
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function delPlatformUserBankCardInfo($uid, $platformId, $bankCardNumber);
    /**
     * 添加用户指定平台的支付宝信息，返回true成功
     *
     * @param \userinfocenter\UserPlatformAliPayInfo $userInfo
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function addPlatformUserAliPayInfo(\userinfocenter\UserPlatformAliPayInfo $userInfo);
    /**
     * 删除用户指定平台的支付宝信息，返回true成功
     *
     * @param int $uid
     * @param int $platformId
     * @param string $alipayAccount
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function delPlatformUserAliPayInfo($uid, $platformId, $alipayAccount);
    /**
     * 身份证号码是否被绑定过，true被绑定了，false没有被绑定
     *
     * @param string $identityCardNumber
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function isIdentityCardNumberExist($identityCardNumber);
    /**
     * 添加未检验的用户所有信息，返回true成功，notcheckFrom为信息来源如"gunxueqiu"
     *
     * @param \userinfocenter\UserInfo $userInfo
     * @param string $notcheckFrom
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function addNotCheckUserInfo(\userinfocenter\UserInfo $userInfo, $notcheckFrom);
    /**
     * 更新用户的银行卡被认证过
     *
     * @param int $uid
     * @param string $bankCardNumber
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function updateBankCardAuthentication($uid, $bankCardNumber);
    /**
     * 按平台更新用户的银行卡被认证过
     *
     * @param int $uid
     * @param string $bankCardNumber
     * @param int $platformId
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function updateBankCardAuthenticationByPlatform($uid, $bankCardNumber, $platformId);
    /**
     * 在UIC清除此用户信息，请慎重使用
     *
     * @param int $uid
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function delUserInfo($uid);
    /**
     * 将普通用户更新为VIP用户
     *
     * @param int $uid
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function updateUserVIP($uid);
    /**
     * 获取用户的所有信息，包含已删除的银行卡信息
     *
     * @param int $uid
     * @return \userinfocenter\UserInfo
     * @throws \userinfocenter\TJinfuziException
     */
    public function getFullAllUserInfo($uid);
    /**
     * 获取用户的账户信息更改记录
     *
     * @param \userinfocenter\AccountModifyQuery $query
     * @return \userinfocenter\UserAccountModifyInfo[]
     * @throws \userinfocenter\TJinfuziException
     */
    public function getUserAccountModifyInfo(\userinfocenter\AccountModifyQuery $query);
    /**
     * 新增用户私募风险评测
     *
     * @param \userinfocenter\UserPFRiskEvaluationInfo $info
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function addUserPFRiskEvaluationInfo(\userinfocenter\UserPFRiskEvaluationInfo $info);
    /**
     * 更新用户私募风险评测
     *
     * @param \userinfocenter\UserPFRiskEvaluationInfo $info
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function updateUserPFRiskEvaluationInfo(\userinfocenter\UserPFRiskEvaluationInfo $info);
    /**
     * 获取用户私募风险评测(erp)
     *
     * @param int $uid
     * @return \userinfocenter\UserPFRiskEvaluationInfo 用户私募风险评测
     *
     * @throws \userinfocenter\TJinfuziException
     */
    public function getUserPFRiskEvaluationInfo($uid);
    /**
     * 获取用户私募风险评测(erp)
     *
     * @param string $phone
     * @return \userinfocenter\UserPFRiskEvaluationInfo 用户私募风险评测
     *
     * @throws \userinfocenter\TJinfuziException
     */
    public function getUserPFRiskEvaluationInfoByPhone($phone);
    /**
     * 手工添加信息，只对证件长度校验
     *
     * @param \userinfocenter\UserBaseInfo $info
     * @return bool
     * @throws \userinfocenter\TJinfuziException
     */
    public function addIdentityInfoInHand(\userinfocenter\UserBaseInfo $info);
}

class ThriftUserInfoServiceClient implements \userinfocenter\ThriftUserInfoServiceIf {
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output=null) {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }

    public function getFullUserInfo($uid)
    {
        $this->send_getFullUserInfo($uid);
        return $this->recv_getFullUserInfo();
    }

    public function send_getFullUserInfo($uid)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getFullUserInfo_args();
        $args->uid = $uid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getFullUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getFullUserInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getFullUserInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getFullUserInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getFullUserInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getFullUserInfo failed: unknown result");
    }

    public function getBasicUserInfo($uid)
    {
        $this->send_getBasicUserInfo($uid);
        return $this->recv_getBasicUserInfo();
    }

    public function send_getBasicUserInfo($uid)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getBasicUserInfo_args();
        $args->uid = $uid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getBasicUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getBasicUserInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getBasicUserInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getBasicUserInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getBasicUserInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getBasicUserInfo failed: unknown result");
    }

    public function getBasicUserInfoList(array $uids)
    {
        $this->send_getBasicUserInfoList($uids);
        return $this->recv_getBasicUserInfoList();
    }

    public function send_getBasicUserInfoList(array $uids)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getBasicUserInfoList_args();
        $args->uids = $uids;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getBasicUserInfoList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getBasicUserInfoList', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getBasicUserInfoList()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getBasicUserInfoList_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getBasicUserInfoList_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getBasicUserInfoList failed: unknown result");
    }

    public function getPlatformUserBankCardInfo($uid, $platformId)
    {
        $this->send_getPlatformUserBankCardInfo($uid, $platformId);
        return $this->recv_getPlatformUserBankCardInfo();
    }

    public function send_getPlatformUserBankCardInfo($uid, $platformId)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getPlatformUserBankCardInfo_args();
        $args->uid = $uid;
        $args->platformId = $platformId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getPlatformUserBankCardInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getPlatformUserBankCardInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getPlatformUserBankCardInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getPlatformUserBankCardInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getPlatformUserBankCardInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getPlatformUserBankCardInfo failed: unknown result");
    }

    public function getUserInfoByBusiness($uid, $platformBusiness)
    {
        $this->send_getUserInfoByBusiness($uid, $platformBusiness);
        return $this->recv_getUserInfoByBusiness();
    }

    public function send_getUserInfoByBusiness($uid, $platformBusiness)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getUserInfoByBusiness_args();
        $args->uid = $uid;
        $args->platformBusiness = $platformBusiness;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getUserInfoByBusiness', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getUserInfoByBusiness', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getUserInfoByBusiness()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getUserInfoByBusiness_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getUserInfoByBusiness_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getUserInfoByBusiness failed: unknown result");
    }

    public function addIdentityCardInfo($uid, \userinfocenter\IdentityCardInfo $identityCardInfo)
    {
        $this->send_addIdentityCardInfo($uid, $identityCardInfo);
        return $this->recv_addIdentityCardInfo();
    }

    public function send_addIdentityCardInfo($uid, \userinfocenter\IdentityCardInfo $identityCardInfo)
    {
        $args = new \userinfocenter\ThriftUserInfoService_addIdentityCardInfo_args();
        $args->uid = $uid;
        $args->identityCardInfo = $identityCardInfo;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'addIdentityCardInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('addIdentityCardInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addIdentityCardInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_addIdentityCardInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_addIdentityCardInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("addIdentityCardInfo failed: unknown result");
    }

    public function addUserInfo(\userinfocenter\UserInfo $userInfo)
    {
        $this->send_addUserInfo($userInfo);
        return $this->recv_addUserInfo();
    }

    public function send_addUserInfo(\userinfocenter\UserInfo $userInfo)
    {
        $args = new \userinfocenter\ThriftUserInfoService_addUserInfo_args();
        $args->userInfo = $userInfo;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'addUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('addUserInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addUserInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_addUserInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_addUserInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("addUserInfo failed: unknown result");
    }

    public function addPlatformUserBankCardInfo(\userinfocenter\UserPlatformBankCardInfo $userInfo)
    {
        $this->send_addPlatformUserBankCardInfo($userInfo);
        return $this->recv_addPlatformUserBankCardInfo();
    }

    public function send_addPlatformUserBankCardInfo(\userinfocenter\UserPlatformBankCardInfo $userInfo)
    {
        $args = new \userinfocenter\ThriftUserInfoService_addPlatformUserBankCardInfo_args();
        $args->userInfo = $userInfo;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'addPlatformUserBankCardInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('addPlatformUserBankCardInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addPlatformUserBankCardInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_addPlatformUserBankCardInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_addPlatformUserBankCardInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("addPlatformUserBankCardInfo failed: unknown result");
    }

    public function delPlatformUserBankCardInfo($uid, $platformId, $bankCardNumber)
    {
        $this->send_delPlatformUserBankCardInfo($uid, $platformId, $bankCardNumber);
        return $this->recv_delPlatformUserBankCardInfo();
    }

    public function send_delPlatformUserBankCardInfo($uid, $platformId, $bankCardNumber)
    {
        $args = new \userinfocenter\ThriftUserInfoService_delPlatformUserBankCardInfo_args();
        $args->uid = $uid;
        $args->platformId = $platformId;
        $args->bankCardNumber = $bankCardNumber;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'delPlatformUserBankCardInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('delPlatformUserBankCardInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_delPlatformUserBankCardInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_delPlatformUserBankCardInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_delPlatformUserBankCardInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("delPlatformUserBankCardInfo failed: unknown result");
    }

    public function addPlatformUserAliPayInfo(\userinfocenter\UserPlatformAliPayInfo $userInfo)
    {
        $this->send_addPlatformUserAliPayInfo($userInfo);
        return $this->recv_addPlatformUserAliPayInfo();
    }

    public function send_addPlatformUserAliPayInfo(\userinfocenter\UserPlatformAliPayInfo $userInfo)
    {
        $args = new \userinfocenter\ThriftUserInfoService_addPlatformUserAliPayInfo_args();
        $args->userInfo = $userInfo;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'addPlatformUserAliPayInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('addPlatformUserAliPayInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addPlatformUserAliPayInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_addPlatformUserAliPayInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_addPlatformUserAliPayInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("addPlatformUserAliPayInfo failed: unknown result");
    }

    public function delPlatformUserAliPayInfo($uid, $platformId, $alipayAccount)
    {
        $this->send_delPlatformUserAliPayInfo($uid, $platformId, $alipayAccount);
        return $this->recv_delPlatformUserAliPayInfo();
    }

    public function send_delPlatformUserAliPayInfo($uid, $platformId, $alipayAccount)
    {
        $args = new \userinfocenter\ThriftUserInfoService_delPlatformUserAliPayInfo_args();
        $args->uid = $uid;
        $args->platformId = $platformId;
        $args->alipayAccount = $alipayAccount;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'delPlatformUserAliPayInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('delPlatformUserAliPayInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_delPlatformUserAliPayInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_delPlatformUserAliPayInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_delPlatformUserAliPayInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("delPlatformUserAliPayInfo failed: unknown result");
    }

    public function isIdentityCardNumberExist($identityCardNumber)
    {
        $this->send_isIdentityCardNumberExist($identityCardNumber);
        return $this->recv_isIdentityCardNumberExist();
    }

    public function send_isIdentityCardNumberExist($identityCardNumber)
    {
        $args = new \userinfocenter\ThriftUserInfoService_isIdentityCardNumberExist_args();
        $args->identityCardNumber = $identityCardNumber;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'isIdentityCardNumberExist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('isIdentityCardNumberExist', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_isIdentityCardNumberExist()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_isIdentityCardNumberExist_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_isIdentityCardNumberExist_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("isIdentityCardNumberExist failed: unknown result");
    }

    public function addNotCheckUserInfo(\userinfocenter\UserInfo $userInfo, $notcheckFrom)
    {
        $this->send_addNotCheckUserInfo($userInfo, $notcheckFrom);
        return $this->recv_addNotCheckUserInfo();
    }

    public function send_addNotCheckUserInfo(\userinfocenter\UserInfo $userInfo, $notcheckFrom)
    {
        $args = new \userinfocenter\ThriftUserInfoService_addNotCheckUserInfo_args();
        $args->userInfo = $userInfo;
        $args->notcheckFrom = $notcheckFrom;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'addNotCheckUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('addNotCheckUserInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addNotCheckUserInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_addNotCheckUserInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_addNotCheckUserInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("addNotCheckUserInfo failed: unknown result");
    }

    public function updateBankCardAuthentication($uid, $bankCardNumber)
    {
        $this->send_updateBankCardAuthentication($uid, $bankCardNumber);
        return $this->recv_updateBankCardAuthentication();
    }

    public function send_updateBankCardAuthentication($uid, $bankCardNumber)
    {
        $args = new \userinfocenter\ThriftUserInfoService_updateBankCardAuthentication_args();
        $args->uid = $uid;
        $args->bankCardNumber = $bankCardNumber;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'updateBankCardAuthentication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('updateBankCardAuthentication', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBankCardAuthentication()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_updateBankCardAuthentication_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_updateBankCardAuthentication_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("updateBankCardAuthentication failed: unknown result");
    }

    public function updateBankCardAuthenticationByPlatform($uid, $bankCardNumber, $platformId)
    {
        $this->send_updateBankCardAuthenticationByPlatform($uid, $bankCardNumber, $platformId);
        return $this->recv_updateBankCardAuthenticationByPlatform();
    }

    public function send_updateBankCardAuthenticationByPlatform($uid, $bankCardNumber, $platformId)
    {
        $args = new \userinfocenter\ThriftUserInfoService_updateBankCardAuthenticationByPlatform_args();
        $args->uid = $uid;
        $args->bankCardNumber = $bankCardNumber;
        $args->platformId = $platformId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'updateBankCardAuthenticationByPlatform', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('updateBankCardAuthenticationByPlatform', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateBankCardAuthenticationByPlatform()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_updateBankCardAuthenticationByPlatform_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_updateBankCardAuthenticationByPlatform_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("updateBankCardAuthenticationByPlatform failed: unknown result");
    }

    public function delUserInfo($uid)
    {
        $this->send_delUserInfo($uid);
        return $this->recv_delUserInfo();
    }

    public function send_delUserInfo($uid)
    {
        $args = new \userinfocenter\ThriftUserInfoService_delUserInfo_args();
        $args->uid = $uid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'delUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('delUserInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_delUserInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_delUserInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_delUserInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("delUserInfo failed: unknown result");
    }

    public function updateUserVIP($uid)
    {
        $this->send_updateUserVIP($uid);
        return $this->recv_updateUserVIP();
    }

    public function send_updateUserVIP($uid)
    {
        $args = new \userinfocenter\ThriftUserInfoService_updateUserVIP_args();
        $args->uid = $uid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'updateUserVIP', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('updateUserVIP', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateUserVIP()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_updateUserVIP_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_updateUserVIP_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("updateUserVIP failed: unknown result");
    }

    public function getFullAllUserInfo($uid)
    {
        $this->send_getFullAllUserInfo($uid);
        return $this->recv_getFullAllUserInfo();
    }

    public function send_getFullAllUserInfo($uid)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getFullAllUserInfo_args();
        $args->uid = $uid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getFullAllUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getFullAllUserInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getFullAllUserInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getFullAllUserInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getFullAllUserInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getFullAllUserInfo failed: unknown result");
    }

    public function getUserAccountModifyInfo(\userinfocenter\AccountModifyQuery $query)
    {
        $this->send_getUserAccountModifyInfo($query);
        return $this->recv_getUserAccountModifyInfo();
    }

    public function send_getUserAccountModifyInfo(\userinfocenter\AccountModifyQuery $query)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getUserAccountModifyInfo_args();
        $args->query = $query;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getUserAccountModifyInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getUserAccountModifyInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getUserAccountModifyInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getUserAccountModifyInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getUserAccountModifyInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getUserAccountModifyInfo failed: unknown result");
    }

    public function addUserPFRiskEvaluationInfo(\userinfocenter\UserPFRiskEvaluationInfo $info)
    {
        $this->send_addUserPFRiskEvaluationInfo($info);
        return $this->recv_addUserPFRiskEvaluationInfo();
    }

    public function send_addUserPFRiskEvaluationInfo(\userinfocenter\UserPFRiskEvaluationInfo $info)
    {
        $args = new \userinfocenter\ThriftUserInfoService_addUserPFRiskEvaluationInfo_args();
        $args->info = $info;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'addUserPFRiskEvaluationInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('addUserPFRiskEvaluationInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addUserPFRiskEvaluationInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_addUserPFRiskEvaluationInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_addUserPFRiskEvaluationInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("addUserPFRiskEvaluationInfo failed: unknown result");
    }

    public function updateUserPFRiskEvaluationInfo(\userinfocenter\UserPFRiskEvaluationInfo $info)
    {
        $this->send_updateUserPFRiskEvaluationInfo($info);
        return $this->recv_updateUserPFRiskEvaluationInfo();
    }

    public function send_updateUserPFRiskEvaluationInfo(\userinfocenter\UserPFRiskEvaluationInfo $info)
    {
        $args = new \userinfocenter\ThriftUserInfoService_updateUserPFRiskEvaluationInfo_args();
        $args->info = $info;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'updateUserPFRiskEvaluationInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('updateUserPFRiskEvaluationInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateUserPFRiskEvaluationInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_updateUserPFRiskEvaluationInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_updateUserPFRiskEvaluationInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("updateUserPFRiskEvaluationInfo failed: unknown result");
    }

    public function getUserPFRiskEvaluationInfo($uid)
    {
        $this->send_getUserPFRiskEvaluationInfo($uid);
        return $this->recv_getUserPFRiskEvaluationInfo();
    }

    public function send_getUserPFRiskEvaluationInfo($uid)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getUserPFRiskEvaluationInfo_args();
        $args->uid = $uid;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getUserPFRiskEvaluationInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getUserPFRiskEvaluationInfo', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getUserPFRiskEvaluationInfo()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getUserPFRiskEvaluationInfo_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getUserPFRiskEvaluationInfo_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getUserPFRiskEvaluationInfo failed: unknown result");
    }

    public function getUserPFRiskEvaluationInfoByPhone($phone)
    {
        $this->send_getUserPFRiskEvaluationInfoByPhone($phone);
        return $this->recv_getUserPFRiskEvaluationInfoByPhone();
    }

    public function send_getUserPFRiskEvaluationInfoByPhone($phone)
    {
        $args = new \userinfocenter\ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_args();
        $args->phone = $phone;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'getUserPFRiskEvaluationInfoByPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('getUserPFRiskEvaluationInfoByPhone', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getUserPFRiskEvaluationInfoByPhone()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("getUserPFRiskEvaluationInfoByPhone failed: unknown result");
    }

    public function addIdentityInfoInHand(\userinfocenter\UserBaseInfo $info)
    {
        $this->send_addIdentityInfoInHand($info);
        return $this->recv_addIdentityInfoInHand();
    }

    public function send_addIdentityInfoInHand(\userinfocenter\UserBaseInfo $info)
    {
        $args = new \userinfocenter\ThriftUserInfoService_addIdentityInfoInHand_args();
        $args->info = $info;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel)
        {
            thrift_protocol_write_binary($this->output_, 'addIdentityInfoInHand', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        }
        else
        {
            $this->output_->writeMessageBegin('addIdentityInfoInHand', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_addIdentityInfoInHand()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\userinfocenter\ThriftUserInfoService_addIdentityInfoInHand_result', $this->input_->isStrictRead());
        else
        {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \userinfocenter\ThriftUserInfoService_addIdentityInfoInHand_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("addIdentityInfoInHand failed: unknown result");
    }

}

// HELPER FUNCTIONS AND STRUCTURES

class ThriftUserInfoService_getFullUserInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getFullUserInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getFullUserInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getFullUserInfo_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserInfo
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserInfo',
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getFullUserInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \userinfocenter\UserInfo();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getFullUserInfo_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getBasicUserInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getBasicUserInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getBasicUserInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getBasicUserInfo_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserBaseInfo
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserBaseInfo',
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getBasicUserInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \userinfocenter\UserBaseInfo();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getBasicUserInfo_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getBasicUserInfoList_args {
    static $_TSPEC;

    /**
     * @var int[]
     */
    public $uids = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uids',
                    'type' => TType::LST,
                    'etype' => TType::I64,
                    'elem' => array(
                        'type' => TType::I64,
                    ),
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uids'])) {
                $this->uids = $vals['uids'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getBasicUserInfoList_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->uids = array();
                        $_size14 = 0;
                        $_etype17 = 0;
                        $xfer += $input->readListBegin($_etype17, $_size14);
                        for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
                        {
                            $elem19 = null;
                            $xfer += $input->readI64($elem19);
                            $this->uids []= $elem19;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getBasicUserInfoList_args');
        if ($this->uids !== null) {
            if (!is_array($this->uids)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('uids', TType::LST, 1);
            {
                $output->writeListBegin(TType::I64, count($this->uids));
                {
                    foreach ($this->uids as $iter20)
                    {
                        $xfer += $output->writeI64($iter20);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getBasicUserInfoList_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserBaseInfo[]
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem' => array(
                        'type' => TType::STRUCT,
                        'class' => '\userinfocenter\UserBaseInfo',
                    ),
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getBasicUserInfoList_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::LST) {
                        $this->success = array();
                        $_size21 = 0;
                        $_etype24 = 0;
                        $xfer += $input->readListBegin($_etype24, $_size21);
                        for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
                        {
                            $elem26 = null;
                            $elem26 = new \userinfocenter\UserBaseInfo();
                            $xfer += $elem26->read($input);
                            $this->success []= $elem26;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getBasicUserInfoList_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRUCT, count($this->success));
                {
                    foreach ($this->success as $iter27)
                    {
                        $xfer += $iter27->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getPlatformUserBankCardInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;
    /**
     * @var int
     */
    public $platformId = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'platformId',
                    'type' => TType::I32,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['platformId'])) {
                $this->platformId = $vals['platformId'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getPlatformUserBankCardInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platformId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getPlatformUserBankCardInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platformId !== null) {
            $xfer += $output->writeFieldBegin('platformId', TType::I32, 2);
            $xfer += $output->writeI32($this->platformId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getPlatformUserBankCardInfo_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserInfo
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserInfo',
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getPlatformUserBankCardInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \userinfocenter\UserInfo();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getPlatformUserBankCardInfo_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getUserInfoByBusiness_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;
    /**
     * @var int
     */
    public $platformBusiness = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'platformBusiness',
                    'type' => TType::I32,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['platformBusiness'])) {
                $this->platformBusiness = $vals['platformBusiness'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getUserInfoByBusiness_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platformBusiness);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getUserInfoByBusiness_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platformBusiness !== null) {
            $xfer += $output->writeFieldBegin('platformBusiness', TType::I32, 2);
            $xfer += $output->writeI32($this->platformBusiness);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getUserInfoByBusiness_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserInfo
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserInfo',
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getUserInfoByBusiness_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \userinfocenter\UserInfo();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getUserInfoByBusiness_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addIdentityCardInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;
    /**
     * @var \userinfocenter\IdentityCardInfo
     */
    public $identityCardInfo = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'identityCardInfo',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\IdentityCardInfo',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['identityCardInfo'])) {
                $this->identityCardInfo = $vals['identityCardInfo'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addIdentityCardInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->identityCardInfo = new \userinfocenter\IdentityCardInfo();
                        $xfer += $this->identityCardInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addIdentityCardInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->identityCardInfo !== null) {
            if (!is_object($this->identityCardInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('identityCardInfo', TType::STRUCT, 2);
            $xfer += $this->identityCardInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addIdentityCardInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addIdentityCardInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addIdentityCardInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addUserInfo_args {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserInfo
     */
    public $userInfo = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'userInfo',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserInfo',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['userInfo'])) {
                $this->userInfo = $vals['userInfo'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addUserInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->userInfo = new \userinfocenter\UserInfo();
                        $xfer += $this->userInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addUserInfo_args');
        if ($this->userInfo !== null) {
            if (!is_object($this->userInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userInfo', TType::STRUCT, 1);
            $xfer += $this->userInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addUserInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addUserInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addUserInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addPlatformUserBankCardInfo_args {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserPlatformBankCardInfo
     */
    public $userInfo = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'userInfo',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserPlatformBankCardInfo',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['userInfo'])) {
                $this->userInfo = $vals['userInfo'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addPlatformUserBankCardInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->userInfo = new \userinfocenter\UserPlatformBankCardInfo();
                        $xfer += $this->userInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addPlatformUserBankCardInfo_args');
        if ($this->userInfo !== null) {
            if (!is_object($this->userInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userInfo', TType::STRUCT, 1);
            $xfer += $this->userInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addPlatformUserBankCardInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addPlatformUserBankCardInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addPlatformUserBankCardInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_delPlatformUserBankCardInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;
    /**
     * @var int
     */
    public $platformId = null;
    /**
     * @var string
     */
    public $bankCardNumber = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'platformId',
                    'type' => TType::I32,
                ),
                3 => array(
                    'var' => 'bankCardNumber',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['platformId'])) {
                $this->platformId = $vals['platformId'];
            }
            if (isset($vals['bankCardNumber'])) {
                $this->bankCardNumber = $vals['bankCardNumber'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_delPlatformUserBankCardInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platformId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankCardNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_delPlatformUserBankCardInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platformId !== null) {
            $xfer += $output->writeFieldBegin('platformId', TType::I32, 2);
            $xfer += $output->writeI32($this->platformId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankCardNumber !== null) {
            $xfer += $output->writeFieldBegin('bankCardNumber', TType::STRING, 3);
            $xfer += $output->writeString($this->bankCardNumber);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_delPlatformUserBankCardInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_delPlatformUserBankCardInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_delPlatformUserBankCardInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addPlatformUserAliPayInfo_args {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserPlatformAliPayInfo
     */
    public $userInfo = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'userInfo',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserPlatformAliPayInfo',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['userInfo'])) {
                $this->userInfo = $vals['userInfo'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addPlatformUserAliPayInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->userInfo = new \userinfocenter\UserPlatformAliPayInfo();
                        $xfer += $this->userInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addPlatformUserAliPayInfo_args');
        if ($this->userInfo !== null) {
            if (!is_object($this->userInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userInfo', TType::STRUCT, 1);
            $xfer += $this->userInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addPlatformUserAliPayInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addPlatformUserAliPayInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addPlatformUserAliPayInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_delPlatformUserAliPayInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;
    /**
     * @var int
     */
    public $platformId = null;
    /**
     * @var string
     */
    public $alipayAccount = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'platformId',
                    'type' => TType::I32,
                ),
                3 => array(
                    'var' => 'alipayAccount',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['platformId'])) {
                $this->platformId = $vals['platformId'];
            }
            if (isset($vals['alipayAccount'])) {
                $this->alipayAccount = $vals['alipayAccount'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_delPlatformUserAliPayInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platformId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->alipayAccount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_delPlatformUserAliPayInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platformId !== null) {
            $xfer += $output->writeFieldBegin('platformId', TType::I32, 2);
            $xfer += $output->writeI32($this->platformId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->alipayAccount !== null) {
            $xfer += $output->writeFieldBegin('alipayAccount', TType::STRING, 3);
            $xfer += $output->writeString($this->alipayAccount);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_delPlatformUserAliPayInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_delPlatformUserAliPayInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_delPlatformUserAliPayInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_isIdentityCardNumberExist_args {
    static $_TSPEC;

    /**
     * @var string
     */
    public $identityCardNumber = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'identityCardNumber',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['identityCardNumber'])) {
                $this->identityCardNumber = $vals['identityCardNumber'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_isIdentityCardNumberExist_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->identityCardNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_isIdentityCardNumberExist_args');
        if ($this->identityCardNumber !== null) {
            $xfer += $output->writeFieldBegin('identityCardNumber', TType::STRING, 1);
            $xfer += $output->writeString($this->identityCardNumber);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_isIdentityCardNumberExist_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_isIdentityCardNumberExist_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_isIdentityCardNumberExist_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addNotCheckUserInfo_args {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserInfo
     */
    public $userInfo = null;
    /**
     * @var string
     */
    public $notcheckFrom = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'userInfo',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserInfo',
                ),
                2 => array(
                    'var' => 'notcheckFrom',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['userInfo'])) {
                $this->userInfo = $vals['userInfo'];
            }
            if (isset($vals['notcheckFrom'])) {
                $this->notcheckFrom = $vals['notcheckFrom'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addNotCheckUserInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->userInfo = new \userinfocenter\UserInfo();
                        $xfer += $this->userInfo->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->notcheckFrom);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addNotCheckUserInfo_args');
        if ($this->userInfo !== null) {
            if (!is_object($this->userInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('userInfo', TType::STRUCT, 1);
            $xfer += $this->userInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->notcheckFrom !== null) {
            $xfer += $output->writeFieldBegin('notcheckFrom', TType::STRING, 2);
            $xfer += $output->writeString($this->notcheckFrom);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addNotCheckUserInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addNotCheckUserInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addNotCheckUserInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_updateBankCardAuthentication_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;
    /**
     * @var string
     */
    public $bankCardNumber = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'bankCardNumber',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['bankCardNumber'])) {
                $this->bankCardNumber = $vals['bankCardNumber'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_updateBankCardAuthentication_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankCardNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_updateBankCardAuthentication_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankCardNumber !== null) {
            $xfer += $output->writeFieldBegin('bankCardNumber', TType::STRING, 2);
            $xfer += $output->writeString($this->bankCardNumber);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_updateBankCardAuthentication_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_updateBankCardAuthentication_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_updateBankCardAuthentication_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_updateBankCardAuthenticationByPlatform_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;
    /**
     * @var string
     */
    public $bankCardNumber = null;
    /**
     * @var int
     */
    public $platformId = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
                2 => array(
                    'var' => 'bankCardNumber',
                    'type' => TType::STRING,
                ),
                3 => array(
                    'var' => 'platformId',
                    'type' => TType::I32,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
            if (isset($vals['bankCardNumber'])) {
                $this->bankCardNumber = $vals['bankCardNumber'];
            }
            if (isset($vals['platformId'])) {
                $this->platformId = $vals['platformId'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_updateBankCardAuthenticationByPlatform_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bankCardNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platformId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_updateBankCardAuthenticationByPlatform_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bankCardNumber !== null) {
            $xfer += $output->writeFieldBegin('bankCardNumber', TType::STRING, 2);
            $xfer += $output->writeString($this->bankCardNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platformId !== null) {
            $xfer += $output->writeFieldBegin('platformId', TType::I32, 3);
            $xfer += $output->writeI32($this->platformId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_updateBankCardAuthenticationByPlatform_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_updateBankCardAuthenticationByPlatform_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_updateBankCardAuthenticationByPlatform_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_delUserInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_delUserInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_delUserInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_delUserInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_delUserInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_delUserInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_updateUserVIP_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_updateUserVIP_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_updateUserVIP_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_updateUserVIP_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_updateUserVIP_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_updateUserVIP_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getFullAllUserInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getFullAllUserInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getFullAllUserInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getFullAllUserInfo_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserInfo
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserInfo',
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getFullAllUserInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \userinfocenter\UserInfo();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getFullAllUserInfo_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getUserAccountModifyInfo_args {
    static $_TSPEC;

    /**
     * @var \userinfocenter\AccountModifyQuery
     */
    public $query = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'query',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\AccountModifyQuery',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['query'])) {
                $this->query = $vals['query'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getUserAccountModifyInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->query = new \userinfocenter\AccountModifyQuery();
                        $xfer += $this->query->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getUserAccountModifyInfo_args');
        if ($this->query !== null) {
            if (!is_object($this->query)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('query', TType::STRUCT, 1);
            $xfer += $this->query->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getUserAccountModifyInfo_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserAccountModifyInfo[]
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem' => array(
                        'type' => TType::STRUCT,
                        'class' => '\userinfocenter\UserAccountModifyInfo',
                    ),
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getUserAccountModifyInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::LST) {
                        $this->success = array();
                        $_size28 = 0;
                        $_etype31 = 0;
                        $xfer += $input->readListBegin($_etype31, $_size28);
                        for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
                        {
                            $elem33 = null;
                            $elem33 = new \userinfocenter\UserAccountModifyInfo();
                            $xfer += $elem33->read($input);
                            $this->success []= $elem33;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getUserAccountModifyInfo_result');
        if ($this->success !== null) {
            if (!is_array($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::LST, 0);
            {
                $output->writeListBegin(TType::STRUCT, count($this->success));
                {
                    foreach ($this->success as $iter34)
                    {
                        $xfer += $iter34->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addUserPFRiskEvaluationInfo_args {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserPFRiskEvaluationInfo
     */
    public $info = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'info',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserPFRiskEvaluationInfo',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['info'])) {
                $this->info = $vals['info'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addUserPFRiskEvaluationInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->info = new \userinfocenter\UserPFRiskEvaluationInfo();
                        $xfer += $this->info->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addUserPFRiskEvaluationInfo_args');
        if ($this->info !== null) {
            if (!is_object($this->info)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('info', TType::STRUCT, 1);
            $xfer += $this->info->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addUserPFRiskEvaluationInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addUserPFRiskEvaluationInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addUserPFRiskEvaluationInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_updateUserPFRiskEvaluationInfo_args {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserPFRiskEvaluationInfo
     */
    public $info = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'info',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserPFRiskEvaluationInfo',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['info'])) {
                $this->info = $vals['info'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_updateUserPFRiskEvaluationInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->info = new \userinfocenter\UserPFRiskEvaluationInfo();
                        $xfer += $this->info->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_updateUserPFRiskEvaluationInfo_args');
        if ($this->info !== null) {
            if (!is_object($this->info)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('info', TType::STRUCT, 1);
            $xfer += $this->info->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_updateUserPFRiskEvaluationInfo_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_updateUserPFRiskEvaluationInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_updateUserPFRiskEvaluationInfo_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getUserPFRiskEvaluationInfo_args {
    static $_TSPEC;

    /**
     * @var int
     */
    public $uid = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'uid',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['uid'])) {
                $this->uid = $vals['uid'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getUserPFRiskEvaluationInfo_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->uid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getUserPFRiskEvaluationInfo_args');
        if ($this->uid !== null) {
            $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
            $xfer += $output->writeI64($this->uid);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getUserPFRiskEvaluationInfo_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserPFRiskEvaluationInfo
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserPFRiskEvaluationInfo',
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getUserPFRiskEvaluationInfo_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \userinfocenter\UserPFRiskEvaluationInfo();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getUserPFRiskEvaluationInfo_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_args {
    static $_TSPEC;

    /**
     * @var string
     */
    public $phone = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'phone',
                    'type' => TType::STRING,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['phone'])) {
                $this->phone = $vals['phone'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->phone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_args');
        if ($this->phone !== null) {
            $xfer += $output->writeFieldBegin('phone', TType::STRING, 1);
            $xfer += $output->writeString($this->phone);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_result {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserPFRiskEvaluationInfo
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserPFRiskEvaluationInfo',
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \userinfocenter\UserPFRiskEvaluationInfo();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_getUserPFRiskEvaluationInfoByPhone_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addIdentityInfoInHand_args {
    static $_TSPEC;

    /**
     * @var \userinfocenter\UserBaseInfo
     */
    public $info = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'info',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\UserBaseInfo',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['info'])) {
                $this->info = $vals['info'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addIdentityInfoInHand_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->info = new \userinfocenter\UserBaseInfo();
                        $xfer += $this->info->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addIdentityInfoInHand_args');
        if ($this->info !== null) {
            if (!is_object($this->info)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('info', TType::STRUCT, 1);
            $xfer += $this->info->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ThriftUserInfoService_addIdentityInfoInHand_result {
    static $_TSPEC;

    /**
     * @var bool
     */
    public $success = null;
    /**
     * @var \userinfocenter\TJinfuziException
     */
    public $e = null;

    public function __construct($vals=null) {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::BOOL,
                ),
                1 => array(
                    'var' => 'e',
                    'type' => TType::STRUCT,
                    'class' => '\userinfocenter\TJinfuziException',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
            if (isset($vals['e'])) {
                $this->e = $vals['e'];
            }
        }
    }

    public function getName() {
        return 'ThriftUserInfoService_addIdentityInfoInHand_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true)
        {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid)
            {
                case 0:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->success);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->e = new \userinfocenter\TJinfuziException();
                        $xfer += $this->e->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output) {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ThriftUserInfoService_addIdentityInfoInHand_result');
        if ($this->success !== null) {
            $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
            $xfer += $output->writeBool($this->success);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->e !== null) {
            $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
            $xfer += $this->e->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}


